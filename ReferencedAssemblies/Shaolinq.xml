<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shaolinq</name>
    </assembly>
    <members>
        <member name="T:Shaolinq.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Shaolinq.Logging.ILog.Log(Shaolinq.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:Shaolinq.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Shaolinq.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Shaolinq.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:Shaolinq.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Shaolinq.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Shaolinq.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Shaolinq.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Shaolinq.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.SetCurrentLogProvider(Shaolinq.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Shaolinq.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shaolinq.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Shaolinq.Logging.LogProvider.SetCurrentLogProvider(Shaolinq.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Shaolinq.Logging.ILog"/></returns>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Shaolinq.Logging.ILog"/></returns>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:Shaolinq.Logging.ILog"/></returns>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Shaolinq.Logging.ILog"/></returns>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Shaolinq.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Shaolinq.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:Shaolinq.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shaolinq.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Shaolinq.AutoIncrementAttribute">
            <summary>
            Applied to a persistable property to indicate that each new object will automatically be assigned a value.
            Only applicable to integer and Guid properties.
            </summary>
            <remarks>
            This property can also be applied on overridden properties to disable the autoincrement attribute by setting the <see cref="P:Shaolinq.AutoIncrementAttribute.AutoIncrement"/> property to false.
            </remarks>
        </member>
        <member name="T:Shaolinq.ConstraintDefaultsConfiguration">
            <summary>
            Used to configure the default constraints, if unspecified on persisted members, for string datatypes.
            </summary>
        </member>
        <member name="P:Shaolinq.ConstraintDefaultsConfiguration.StringMaximumLength">
            <summary>
            The maximum size of the string.
            </summary>
        </member>
        <member name="P:Shaolinq.ConstraintDefaultsConfiguration.IndexedStringMaximumLength">
            <summary>
            The maximum size of the string if the column is used in any index. If in doubt set as the same value for <see cref="P:Shaolinq.ConstraintDefaultsConfiguration.StringMaximumLength"/>.
            </summary>
        </member>
        <member name="P:Shaolinq.ConstraintDefaultsConfiguration.StringSizeFlexibility">
            <summary>
            Determines how flexible the storage is for the string.
            </summary>
            <remarks>
            <see cref="F:Platform.Validation.SizeFlexibility.Variable"/> usually maps to <c>VARCHAR</c> and <see cref="F:Platform.Validation.SizeFlexibility.Fixed"/> maps to <c>CHAR</c>.
            </remarks>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.OpenConnection``1(``0)">
            <summary>
            Opens and returns a new connection to the database for the given <see cref="!:model"/>.
            </summary>
            <typeparam name="TDataAccessModel">The type of <see cref="T:Shaolinq.DataAccessModel"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <remarks>This method does not require an existing <see cref="T:Shaolinq.DataAccessScope"/>. The new connection will be
            unrelated to any existing scope and it is up to the caller to dispose of the connection.</remarks>
            <returns>The <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.CreateCommand``1(``0)">
            <summary>
            Creates a <see cref="T:System.Data.IDbCommand"/> object for the current <see cref="T:Shaolinq.DataAccessScope"/> and <see cref="!:model"/>.
            </summary>
            <typeparam name="TDataAccessModel">The type of <see cref="T:Shaolinq.DataAccessModel"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <remarks>This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/></remarks>
            <returns>The <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteNonQuery``1(``0,System.String,System.Object[])">
            <summary>
            Executes a given SQL query and returns the number of rows affected.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="sql">The SQL query as a string</param>
            <param name="arguments">Arguments for the SQL query</param>
            <remarks>
            This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>The number of rows affected by the query.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReadAll``2(``0,System.Func{System.Data.IDataReader,``1},System.String)">
            <summary>
            Returns a list of results for a given SQL query.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <typeparam name="T">The type of object to return for each value in the result set. Also see <see cref="!:readObject"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="readObject">A function that converts an <see cref="T:System.Data.IDataReader"/> into an object of type <see cref="!:T"/></param>
            <param name="sql">The SQL query as a string</param>
            <remarks>
            This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>An <see cref="T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref="T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReadAll``3(``0,System.Func{System.Data.IDataReader,``2},System.String,``1)">
            <summary>
            Returns a list of results for a given SQL query.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <typeparam name="T">The type of object to return for each value in the result set. Also see <see cref="!:readObject"/></typeparam>
            <typeparam name="TArgs">The anonymous type containing the parameters referenced by <see cref="!:sql"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="readObject">A function that converts an <see cref="T:System.Data.IDataReader"/> into an object of type <see cref="!:T"/></param>
            <param name="sql">The SQL query as a string</param>
            <param name="args">An anonymous type containing the parameters referenced by <see cref="!:sql"/></param>
            <remarks>
            This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>An <see cref="T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref="T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReader``1(``0,System.String)">
            <summary>
            Gets an <see cref="T:Shaolinq.IAsyncEnumerable`1"/> for a given SQL query.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="sql">The SQL query as a string</param>
            <remarks>
            This method does not block. The query is executed on the first call to <see cref="!:IEnumerator&lt;T&gt;.MoveNext()"/>.
            or <see cref="M:Shaolinq.IAsyncEnumerator`1.MoveNextAsync"/>.
            <para>This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.</para>
            </remarks>
            <returns>An <see cref="T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref="T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReader``2(``0,System.String,``1)">
            <summary>
            Gets an <see cref="T:Shaolinq.IAsyncEnumerable`1"/> for a given SQL query.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <typeparam name="TArgs">The anonymous type containing the parameters referenced by <see cref="!:sql"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="sql">The SQL query as a string</param>
            <param name="args">An anonymous type containing the parameters referenced by <see cref="!:sql"/></param>
            <remarks>
            This method does not block. The query is executed on the first call to <see cref="!:IEnumerator&lt;T&gt;.MoveNext()"/>.
            or <see cref="M:Shaolinq.IAsyncEnumerator`1.MoveNextAsync"/>.
            <para>This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.</para>
            </remarks>
            <returns>An <see cref="T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref="T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReader``2(``0,System.Func{System.Data.IDataReader,``1},System.String)">
            <summary>
            Gets an <see cref="T:Shaolinq.IAsyncEnumerable`1"/> for a given SQL query.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <typeparam name="T">The type of object to return for each value in the result set. Also see <see cref="!:readObject"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="readObject">A function that converts an <see cref="T:System.Data.IDataReader"/> into an object of type <see cref="!:T"/></param>
            <param name="sql">The SQL query as a string</param>
            <remarks>
            This method does not block. The query is executed on the first call to <see cref="!:IEnumerator&lt;T&gt;.MoveNext()"/>.
            or <see cref="M:Shaolinq.IAsyncEnumerator`1.MoveNextAsync"/>.
            <para>This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.</para>
            </remarks>
            <returns>An <see cref="T:Shaolinq.IAsyncEnumerable`1"/> that presents an object of type <see cref="!:T"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReader``3(``0,System.Func{System.Data.IDataReader,``2},System.String,``1)">
            <summary>
            Gets an <see cref="T:Shaolinq.IAsyncEnumerable`1"/> for a given SQL query.
            </summary>
            <typeparam name="TDataAccessModel"></typeparam>
            <typeparam name="T">The type of object to return for each value in the result set. Also see <see cref="!:readObject"/></typeparam>
            <typeparam name="TArgs">The anonymous type containing the parameters referenced by <see cref="!:sql"/></typeparam>
            <param name="model">The <see cref="T:Shaolinq.DataAccessModel"/></param>
            <param name="readObject">A function that converts an <see cref="T:System.Data.IDataReader"/> into an object of type <see cref="!:T"/></param>
            <param name="sql">The SQL query as a string</param>
            <param name="args">An anonymous type containing the parameters referenced by <see cref="!:sql"/></param>
            <remarks>
            This method does not block. The query is executed on the first call to <see cref="!:IEnumerator&lt;T&gt;.MoveNext()"/>.
            or <see cref="M:Shaolinq.IAsyncEnumerator`1.MoveNextAsync"/>.
            <para>This method can only be called from within a <see cref="T:Shaolinq.DataAccessScope"/>.</para>
            </remarks>
            <returns>An <see cref="T:Shaolinq.IAsyncEnumerable`1"/> that presents an object of type <see cref="!:T"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.OpenConnectionAsync``1(``0)">
            <summary>
            Opens and returns a new connection to the database for the given <see cref = "!:model"/>.
            </summary>
            <typeparam name = "TDataAccessModel">The type of <see cref = "T:Shaolinq.DataAccessModel"/></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <remarks>This method does not require an existing <see cref = "T:Shaolinq.DataAccessScope"/>. The new connection will be
            unrelated to any existing scope and it is up to the caller to dispose of the connection.</remarks>
            <returns>The <see cref = "T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.OpenConnectionAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Opens and returns a new connection to the database for the given <see cref = "!:model"/>.
            </summary>
            <typeparam name = "TDataAccessModel">The type of <see cref = "T:Shaolinq.DataAccessModel"/></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <remarks>This method does not require an existing <see cref = "T:Shaolinq.DataAccessScope"/>. The new connection will be
            unrelated to any existing scope and it is up to the caller to dispose of the connection.</remarks>
            <returns>The <see cref = "T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteNonQueryAsync``1(``0,System.String,System.Object[])">
            <summary>
            Executes a given SQL query and returns the number of rows affected.
            </summary>
            <typeparam name = "TDataAccessModel"></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <param name = "sql">The SQL query as a string</param>
            <param name = "arguments">Arguments for the SQL query</param>
            <remarks>
            This method can only be called from within a <see cref = "T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>The number of rows affected by the query.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteNonQueryAsync``1(``0,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a given SQL query and returns the number of rows affected.
            </summary>
            <typeparam name = "TDataAccessModel"></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <param name = "sql">The SQL query as a string</param>
            <param name = "arguments">Arguments for the SQL query</param>
            <remarks>
            This method can only be called from within a <see cref = "T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>The number of rows affected by the query.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReadAllAsync``2(``0,System.Func{System.Data.IDataReader,``1},System.String)">
            <summary>
            Returns a list of results for a given SQL query.
            </summary>
            <typeparam name = "TDataAccessModel"></typeparam>
            <typeparam name = "T">The type of object to return for each value in the result set. Also see <see cref = "!:readObject"/></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <param name = "readObject">A function that converts an <see cref = "T:System.Data.IDataReader"/> into an object of type <see cref = "!:T"/></param>
            <param name = "sql">The SQL query as a string</param>
            <remarks>
            This method can only be called from within a <see cref = "T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>An <see cref = "T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref = "T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReadAllAsync``2(``0,System.Func{System.Data.IDataReader,``1},System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a list of results for a given SQL query.
            </summary>
            <typeparam name = "TDataAccessModel"></typeparam>
            <typeparam name = "T">The type of object to return for each value in the result set. Also see <see cref = "!:readObject"/></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <param name = "readObject">A function that converts an <see cref = "T:System.Data.IDataReader"/> into an object of type <see cref = "!:T"/></param>
            <param name = "sql">The SQL query as a string</param>
            <remarks>
            This method can only be called from within a <see cref = "T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>An <see cref = "T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref = "T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReadAllAsync``3(``0,System.Func{System.Data.IDataReader,``2},System.String,``1)">
            <summary>
            Returns a list of results for a given SQL query.
            </summary>
            <typeparam name = "TDataAccessModel"></typeparam>
            <typeparam name = "T">The type of object to return for each value in the result set. Also see <see cref = "!:readObject"/></typeparam>
            <typeparam name = "TArgs">The anonymous type containing the parameters referenced by <see cref = "!:sql"/></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <param name = "readObject">A function that converts an <see cref = "T:System.Data.IDataReader"/> into an object of type <see cref = "!:T"/></param>
            <param name = "sql">The SQL query as a string</param>
            <param name = "args">An anonymous type containing the parameters referenced by <see cref = "!:sql"/></param>
            <remarks>
            This method can only be called from within a <see cref = "T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>An <see cref = "T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref = "T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="M:Shaolinq.DirectAccess.Sql.DataAccessModelExtensions.ExecuteReadAllAsync``3(``0,System.Func{System.Data.IDataReader,``2},System.String,``1,System.Threading.CancellationToken)">
            <summary>
            Returns a list of results for a given SQL query.
            </summary>
            <typeparam name = "TDataAccessModel"></typeparam>
            <typeparam name = "T">The type of object to return for each value in the result set. Also see <see cref = "!:readObject"/></typeparam>
            <typeparam name = "TArgs">The anonymous type containing the parameters referenced by <see cref = "!:sql"/></typeparam>
            <param name = "model">The <see cref = "T:Shaolinq.DataAccessModel"/></param>
            <param name = "readObject">A function that converts an <see cref = "T:System.Data.IDataReader"/> into an object of type <see cref = "!:T"/></param>
            <param name = "sql">The SQL query as a string</param>
            <param name = "args">An anonymous type containing the parameters referenced by <see cref = "!:sql"/></param>
            <remarks>
            This method can only be called from within a <see cref = "T:Shaolinq.DataAccessScope"/>.
            </remarks>
            <returns>An <see cref = "T:Shaolinq.IAsyncEnumerable`1"/> that presents an <see cref = "T:System.Data.IDataReader"/> for each row in the result set.</returns>
        </member>
        <member name="F:Shaolinq.LoadOptions.EagerOnly">
            <summary>
            Return the items that were eager loaded (cached). Throws <see cref="T:System.InvalidOperationException"/> if the collection hasn't been eager loaded.
            </summary>
        </member>
        <member name="F:Shaolinq.LoadOptions.LazyOnly">
            <summary>
            Loads, caches and returns the items using a query.
            </summary>
        </member>
        <member name="F:Shaolinq.LoadOptions.EagerOrLazy">
            <summary>
            Return the items that were eager loaded or loads, caches and returns tems using a new query.
            </summary>
        </member>
        <member name="M:Shaolinq.Persistence.Linq.Expressions.SqlOrganizationIndexExpression.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Shaolinq.Persistence.Linq.Expressions.SqlIndexedColumnExpression},System.Collections.Generic.IReadOnlyList{Shaolinq.Persistence.Linq.Expressions.SqlIndexedColumnExpression})">
            <summary>
            Creates a new <c>SqlOrganizationIndexExpression</c>
            </summary>
            <param name="indexName">The name of the index</param>
            <param name="columns">The columns in the index or null to remove an explicitly defined organization index</param>
            <param name="includedColumns">Columns to include int he organization index (default depends on underlying RDBMS)</param>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Expressions.SqlAggregateExpression">
            <summary>
            A SQL aggregate expression such as MAX(columnn) or COUNT(*) or COUNT(DISTINCT column)
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Expressions.SqlSubqueryExpression">
            <summary>
            Represents an aggregate subquery before the aggregate has been rewritten.
            </summary>
            <remarks>
            When a LINQ query projects a column using an aggregate, the subquery holds a select expression that represents that single aggregate call.
            The subquery consists of the part inside the outer parenthesis: <c>SELECT (SELECT MAX(id) FROM product) AS max FROM product;</c>
            </remarks>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Expressions.SqlFunctionCallExpression">
            <summary>
            Represents an SQL function call such as DATE, YEAR, SUBSTRING or ISNULL.
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.IsNull">
            <summary>
            SQL IS NULL
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.IsNotNull">
            <summary>
            SQL IS NOT NULL
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.NullIf">
            <summary>
            Returns null if both arguments are equal
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Date">
            <summary>
            Gets the Date's date part only
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.DayOfWeek">
            <summary>
            Gets a Date's day of the week
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.DayOfMonth">
            <summary>
            Gets a Date's day of the month
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.DayOfYear">
            <summary>
            Gets a Date's day of the year
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Week">
            <summary>
            Gets a Date's week of the year
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Month">
            <summary>
            Gets a Date's month of the year
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Year">
            <summary>
            Gets a Date's year
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Hour">
            <summary>
            Gets a Date's hour
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Minute">
            <summary>
            Gets a Date's minute
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Second">
            <summary>
            Gets a Date's seconds
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Like">
            <summary>
            Compares a string using LIKE
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.NotLike">
            <summary>
            Compares a string using NOT LIKE
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.ServerNow">
            <summary>
            Gets the DateTime on the server
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.ServerUtcNow">
            <summary>
            Gets the UTC DateTime on the server
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Substring">
            <summary>
            Gets part of a string
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Trim">
            <summary>
            Removes spaces from the start and end of a string
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.TrimLeft">
            <summary>
            Removes spaces from the start and end of a string
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.TrimRight">
            <summary>
            Removes spaces from the start and end of a string
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Upper">
            <summary>
            Converts a string to upper case
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Lower">
            <summary>
            Converts a string to lower case
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Concat">
            <summary>
            Concats two or more strings
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.In">
            <summary>
            "In" function
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Exists">
            <summary>
            "In" function
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.Round">
            <summary>
            Round function for floating point numbers. 
            </summary>
        </member>
        <member name="F:Shaolinq.Persistence.Linq.Expressions.SqlFunction.CollectionCount">
            <summary>
            Count of blobbed lists or dictionaries
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Expressions.SqlColumnDeclaration">
            <summary>
            A SqlColumnDeclaraction represents the part in parenthesis in the following select statement: SELECT (expression as columnname).
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Expressions.SqlColumnExpression">
            <summary>
            Represents an access to an sql-projected SQL column.  The access may be to
            an outer select in which case the <see cref="P:Shaolinq.Persistence.Linq.Expressions.SqlColumnExpression.SelectAlias"/> property
            is the alias given of the outer select.
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.ComplexDataAccessObjectProjector`1">
            <summary>
            Projects DataAccessObjects that are contained inside non-DAO objects
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.ParameterPathFinder">
            <summary>
            Finds the property/field path required to get to the parameter of a selector.
            </summary>
            <remarks>
            <code>c => new { a = new { b = c } } -> [member(a), member(b)] </code>
            </remarks>
        </member>
        <member name="M:Shaolinq.Persistence.Linq.Optimizers.SqlProjectionSelectExpander.RewriteExplicitJoinProjection(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Translates Joins from type (1) to type (2)
            1) Join(outer, inner, c => c.outerKey, c => d.innerKey, (x, y) => new { x.a.b.c, y.a.b.c })
            2) Join(outer, inner, c => c.outerKey, c => d.innerKey, (x, y) => new { x, y }).Select(c => new { c.x.a.b.c, c.y.a.b.v })
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlPropertyAccessToSelectAmender">
            <summary>
            Converts property accesses off single objects into selects.
            </summary>
            <remarks>
            <c>Where(c => c.Animals.First().Name == "")</c> gets converted to <c>Where(c => c.Animals.Select(d => .Name).First() == "")</c> 
            </remarks>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.ShiftSubCollectionIncludesOutsideSkipTakeAmender">
            <summary>
            Moves Include statements that include sub collections outside of Skip/Take if possible otherwise eliminate the include altogether.
            </summary>
            <remarks>
            <code>
            query.Include(c => c.Shops).Skip(1).Take(10)
            ->
            query.Skip(1).Take(10).Include(c => c.Shops)
            </code>
            Test: ComplexIncludeTests.Test3
            </remarks>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlIncludeExpander">
            <summary>
            Converts <c>queryable.Include(c => c.A.B) -> queryable.Select(c => c.IncludeDirect(d => d.A.B))</c>.
            </summary>
            <remarks>
            Also converts nested includes calls into a single include call.
            <code>
            Include(c => c.Shops.Include(d => d.Toys.Include(e => e.Shop.Mall.Shops2))) -> Include(c => c.Shops.IncludedItems().Toys.IncludedItems().Shop.Mall.Shops2)
            </code>
            </remarks>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlAggregateSubqueryFinder">
            <summary>
            Finds and returns all aggregates within an expression.
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlAggregateSubqueryRewriter">
            <summary>
            Rewrite aggregate expressions, moving them into same select expression that has the group-by clause.
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlAggregateChecker">
            <summary>
            Determines if a Select contains any aggregate expressions
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlUnusedColumnRemover">
            <summary>
            Removes column declarations in selects that are not referenced
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlFunctionCoalescer">
            <summary>
            An optimizer that turns nested SQL function calls into a single function call (if possible)
            function call.
            </summary>
            <remarks>
            For example: CONCAT(CONCAT(X, Y), Z) => CONCAT(X, Y, Z)
            </remarks>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlOrderByRewriter">
            <summary>
            Move OrderBy expressions to the outer most select
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlRedundantSubqueryRemover">
            <summary>
            Removes select expressions that don't add any additional semantic value
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Optimizers.SqlRedundantColumnRemover">
            <summary>
            Removes duplicate column declarations that refer to the same underlying column.
            </summary>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.SqlExpressionReplacer">
            <summary>
            Replaces an expression within an expression tree with another expression
            </summary>
        </member>
        <member name="M:Shaolinq.Persistence.Linq.SqlExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Walks an <see cref="!:expression"/>; finds the <see cref="!:searchFor"/> expression
            and replaces it with <see cref="!:replaceWith"/>.  Uses an object identity
            comparison to identify if <see cref="!:searchFor"/> and <see cref="!:replaceWith"/>
            are the same.
            </summary>
            <param name="expression">The expression to look withib</param>
            <param name="searchFor">The expression to look for</param>
            <param name="replaceWith">The expression to replace with</param>
            <returns>
            The original expression with the <see cref="!:searchFor"/> replaced 
            by <see cref="!:replaceWith"/> if <see cref="!:searchFor"/> was found
            </returns>
        </member>
        <member name="M:Shaolinq.Persistence.Linq.SqlExpressionReplacer.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Comparison{System.Linq.Expressions.Expression})">
            <summary>
            Walks an <see cref="!:expression"/>; finds the <see cref="!:searchFor"/> expression
            and replaces it with <see cref="!:replaceWith"/>.  Uses the provided
            <see cref="T:System.Comparison`1"/> to compare <see cref="!:searchFor"/> and <see cref="!:replaceWith"/>.
            </summary>
            <param name="expression">The expression to look withib</param>
            <param name="searchFor">The expression to look for</param>
            <param name="replaceWith">The expression to replace with</param>
            <param name="compareExpressions">A <see cref="T:System.Comparison`1"/> 
            used to compare <see cref="!:searchFor"/> and <see cref="!:replaceWith"/></param>
            <returns>
            The original expression with the <see cref="!:searchFor"/> replaced 
            by <see cref="!:replaceWith"/> if <see cref="!:searchFor"/> was found
            </returns>
        </member>
        <member name="T:Shaolinq.Persistence.Linq.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.ConnectionString">
            <summary>
            The connection string for this connection/context. This value can be <see langword="null"/> if enough
            property values are provided for the Shaolinq provider to create a connection string automatically.
            </summary>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.Categories">
            <summary>
            A comma deliminated list of categories that this connection/context belongs to.
            </summary>
            <remarks>
            Categories are currently not used.
            </remarks>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.CommandTimeout">
            <summary>
            The maximum execution time for each command being executed in seconds. If null the default value is <see cref="F:Shaolinq.Persistence.SqlDatabaseContextInfo.DefaultCommandTimeout"/> or 120 seconds.
            </summary>
            <remarks>
            Other factors may affect the timeout of an executing command such as how the server is configured.
            </remarks>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.ConnectionTimeout">
            <summary>
            The idle timeout for the connection in seconds. If null the default value is <see cref="F:Shaolinq.Persistence.SqlDatabaseContextInfo.DefaultConnectionTimeout"/> or 60 seconds.
            </summary>
            <remarks>
            This value is configured by setting <see cref="P:System.Data.Common.DbCommand.CommandTimeout"/> with each new command.
            </remarks>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.ConnectionCommandTimeout">
            <summary>
            The idle timeout for each connection as configured on the DbConnection or connection string.
            </summary>
            <remarks>
            This value is the value configured once on the connection string or <see cref="T:System.Data.Common.DbConnection"/>
            if supported by the underlying ADO.NET provider. This value may or may not have the same semantics
            as <see cref="P:Shaolinq.Persistence.SqlDatabaseContextInfo.ConnectionTimeout"/> and is entirely dependent on the underlying ADO.NET provider.
            </remarks>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.TableNamePrefix">
            <summary>
            A prefix to put before each table name. This is a global setting for the connection and overrides
            any <see cref="T:Shaolinq.NamingTransformsConfiguration"/>.
            </summary>
            <remarks>
            It is preferred to use <see cref="P:Shaolinq.NamingTransformsConfiguration.DataAccessObjectName"/> as you will
            have more flexibility by using regex to control the naming conventions.
            </remarks>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.IndexNamesShouldIncludeIncludedProperties">
            <summary>
            If true then automatically generated index names should include the names of included (non indexed) columnss. Default is false.
            </summary>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.SchemaName">
            <summary>
            The name of the schema to use for the database.
            </summary>
        </member>
        <member name="P:Shaolinq.Persistence.SqlDatabaseContextInfo.SqlDataTypeProvider">
            <summary>
            The type of the <see cref="P:Shaolinq.Persistence.SqlDatabaseContextInfo.SqlDataTypeProvider"/> for this connection/context.
            </summary>
        </member>
        <member name="M:Shaolinq.Persistence.SqlDataType.ConvertForSql(System.Object)">
            <summary>
            Converts the given value for serializing to SQL.  The default
            implementation performs no conversion.
            </summary>
            <param name="value">The value</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Shaolinq.Persistence.SqlDataType.GetSqlName(Shaolinq.Persistence.PropertyDescriptor)">
            <summary>
            Gets the SQL type name for the given property.
            </summary>
            <param name="propertyDescriptor">The property whose return type is to be serialized</param>
            <returns>The SQL type name</returns>
        </member>
        <member name="M:Shaolinq.Persistence.SqlDataType.GetSqlName(Shaolinq.Persistence.PropertyDescriptor,Shaolinq.ConstraintDefaultsConfiguration)">
            <summary>
            Gets the SQL type name for the given property.
            </summary>
            <returns>The SQL type name</returns>
        </member>
        <member name="M:Shaolinq.Persistence.SqlDataType.GetReadExpression(System.Linq.Expressions.Expression,System.Int32)">
            <summary>
            Gets an expression to perform reading of a column.
            </summary>
            <param name="dataReader">The parameter that references the <see cref="T:System.Data.IDataReader"/></param>
            <param name="ordinal">The parameter that contains the ordinal of the column to read</param>
            <returns>An expression for reading the column into a value</returns>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Flush">
            <summary>
            Flushes the current transaction for all <see cref="T:Shaolinq.DataAccessModel"/> that have
            participated in the current transaction
            </summary>
            <remarks>
            Flushing a transaction writes any pending INSERTs, UPDATES and DELETES to the database
            but does not commit the transaction. To commit the transaction you must call 
            <see cref="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>.
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Flush(Shaolinq.DataAccessModel)">
            <summary>
            Flushes the current transaction for the given <paramref name="dataAccessModel"/>
            </summary>
            <remarks>
            Flushing a transaction writes any pending INSERTs, UPDATES and DELETES to the database
            but does not commit the transaction. To commit the transaction you must call 
            <see cref="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>.
            </remarks>
            <param name="dataAccessModel">
            The <see cref="T:Shaolinq.DataAccessModel"/> to flush if you only want to flush a single
            DataAccessModel
            </param>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Complete``1(System.Func{``0})">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Complete``1(System.Func{``0},Shaolinq.ScopeCompleteOptions)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Complete">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            Flushing a scope commits 
            </para>
            <para>
            A scope is considered to have aborted if Complete is not called before the scope is disposed
            The outer most scope flushes and commits the transaction when it is completed.
            </para>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref="M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
            <param name="options">Set to <a cref="F:Shaolinq.ScopeCompleteOptions.SuppressAutoFlush"/> to suppress auto-flush</param>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Import``1(``0)">
            <summary>
            Import the given <see cref="T:Shaolinq.DataAccessObject"/> into the current scope.
            </summary>
            <typeparam name="T">The type of <see cref="T:Shaolinq.DataAccessObject"/> to import</typeparam>
            <param name="dataAccessObject">The <see cref="T:Shaolinq.DataAccessObject"/> to import</param>
            <returns>The given <see cref="T:Shaolinq.DataAccessObject"/> unless a cached copy of the <see cref="T:Shaolinq.DataAccessObject"/>
            already exists in the current context in which case the existing instance is merged with the imported object
            and the existing instance returned.</returns>
            <remarks>
            <para>Use this method to import a <see cref="T:Shaolinq.DataAccessObject"/> stored from a different context into the
            current context.</para>
            <para>Each <see cref="T:Shaolinq.DataAccessScope"/> has a context that contains a cache of all the <see cref="T:Shaolinq.DataAccessObject"/>s that have been
            created or queried. Subsequent queries will return the same instance of the object. Importing an object that is
            already cached will not replace the existing object with the imported object but rather changes from the imported
            object will be applied to the existing object in a merge operation. For the purposes of a merge, changes in the imported
            object have higher priority than uncommited changes in the existing object in the cache.</para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Import``1(``0[])">
            <summary>
            Import the given <see cref="T:Shaolinq.DataAccessObject"/>s into the current scope.
            </summary>
            <typeparam name="T">The type of <see cref="T:Shaolinq.DataAccessObject"/>s to import</typeparam>
            <param name="dataAccessObjects">The <see cref="T:Shaolinq.DataAccessObject"/>s to import</param>
            <remarks>
            <para>Use this method to import a set of <see cref="T:Shaolinq.DataAccessObject"/>s stored from a different context into the
            current context.</para>
            <para>Each <see cref="T:Shaolinq.DataAccessScope"/> has a context that contains a cache of all the <see cref="T:Shaolinq.DataAccessObject"/>s that have been
            created or queried. Subsequent queries will return the same instance of the object. Importing an object that is
            already cached will not replace the existing object with the imported object but rather changes from the imported
            object will be applied to the existing object in a merge operation. For the purposes of a merge, changes in the imported
            object have higher priority than uncommited changes in the existing object in the cache.</para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.Import``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Import the given <see cref="T:Shaolinq.DataAccessObject"/>s into the current scope.
            </summary>
            <typeparam name="T">The type of <see cref="T:Shaolinq.DataAccessObject"/>s to import</typeparam>
            <param name="dataAccessObjects">The <see cref="T:Shaolinq.DataAccessObject"/>s to import</param>
            <remarks>
            <para>Use this method to import a set of <see cref="T:Shaolinq.DataAccessObject"/>s stored from a different context into the
            current context.</para>
            <para>Each <see cref="T:Shaolinq.DataAccessScope"/> has a context that contains a cache of all the <see cref="T:Shaolinq.DataAccessObject"/>s that have been
            created or queried. Subsequent queries will return the same instance of the object. Importing an object that is
            already cached will not replace the existing object with the imported object but rather changes from the imported
            object will be applied to the existing object in a merge operation. For the purposes of a merge, changes in the imported
            object have higher priority than uncommited changes in the existing object in the cache.</para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.FlushAsync">
            <summary>
            Flushes the current transaction for all <see cref = "T:Shaolinq.DataAccessModel"/> that have
            participated in the current transaction
            </summary>
            <remarks>
            Flushing a transaction writes any pending INSERTs, UPDATES and DELETES to the database
            but does not commit the transaction. To commit the transaction you must call 
            <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>.
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes the current transaction for all <see cref = "T:Shaolinq.DataAccessModel"/> that have
            participated in the current transaction
            </summary>
            <remarks>
            Flushing a transaction writes any pending INSERTs, UPDATES and DELETES to the database
            but does not commit the transaction. To commit the transaction you must call 
            <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>.
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.FlushAsync(Shaolinq.DataAccessModel)">
            <summary>
            Flushes the current transaction for the given <paramref name = "dataAccessModel"/>
            </summary>
            <remarks>
            Flushing a transaction writes any pending INSERTs, UPDATES and DELETES to the database
            but does not commit the transaction. To commit the transaction you must call 
            <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>.
            </remarks>
            <param name = "dataAccessModel">
            The <see cref = "T:Shaolinq.DataAccessModel"/> to flush if you only want to flush a single
            DataAccessModel
            </param>
        </member>
        <member name="M:Shaolinq.DataAccessScope.FlushAsync(Shaolinq.DataAccessModel,System.Threading.CancellationToken)">
            <summary>
            Flushes the current transaction for the given <paramref name = "dataAccessModel"/>
            </summary>
            <remarks>
            Flushing a transaction writes any pending INSERTs, UPDATES and DELETES to the database
            but does not commit the transaction. To commit the transaction you must call 
            <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>.
            </remarks>
            <param name = "dataAccessModel">
            The <see cref = "T:Shaolinq.DataAccessModel"/> to flush if you only want to flush a single
            DataAccessModel
            </param>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync``1(System.Func{``0})">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync``1(System.Func{``0},Shaolinq.ScopeCompleteOptions)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync``1(System.Func{``0},Shaolinq.ScopeCompleteOptions,System.Threading.CancellationToken)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync(Shaolinq.ScopeCompleteOptions)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            Flushing a scope commits 
            </para>
            <para>
            A scope is considered to have aborted if Complete is not called before the scope is disposed
            The outer most scope flushes and commits the transaction when it is completed.
            </para>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
            <param name = "options">Set to <a cref = "F:Shaolinq.ScopeCompleteOptions.SuppressAutoFlush"/> to suppress auto-flush</param>
        </member>
        <member name="M:Shaolinq.DataAccessScope.CompleteAsync(Shaolinq.ScopeCompleteOptions,System.Threading.CancellationToken)">
            <summary>
            Flushes the current transaction and marks the scope as completed
            </summary>
            <remarks>
            <para>
            Flushing a scope commits 
            </para>
            <para>
            A scope is considered to have aborted if Complete is not called before the scope is disposed
            The outer most scope flushes and commits the transaction when it is completed.
            </para>
            <para>
            By default all nested scopes auto-flush without commiting the transaction. You can
            disable auto-flush by calling <see cref = "M:Shaolinq.DataAccessScope.Complete(Shaolinq.ScopeCompleteOptions)"/>
            </para>
            </remarks>
            <param name = "options">Set to <a cref = "F:Shaolinq.ScopeCompleteOptions.SuppressAutoFlush"/> to suppress auto-flush</param>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.CreateAsync(Shaolinq.DataAccessObject)">
            <summary>
            Called after a new object has been created
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.CreateAsync(Shaolinq.DataAccessObject,System.Threading.CancellationToken)">
            <summary>
            Called after a new object has been created
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.ReadAsync(Shaolinq.DataAccessObject)">
            <summary>
            Called just after an object has been read from the database
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.ReadAsync(Shaolinq.DataAccessObject,System.Threading.CancellationToken)">
            <summary>
            Called just after an object has been read from the database
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.BeforeSubmitAsync(Shaolinq.DataAccessModelHookSubmitContext)">
            <summary>
            Called just before changes/updates are written to the database
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.BeforeSubmitAsync(Shaolinq.DataAccessModelHookSubmitContext,System.Threading.CancellationToken)">
            <summary>
            Called just before changes/updates are written to the database
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.AfterSubmitAsync(Shaolinq.DataAccessModelHookSubmitContext)">
            <summary>
            Called just after changes have been written to the database
            </summary>
            <remarks>
            A transaction is usually committed after this call unless the call is due
            to a <see cref = "M:Shaolinq.DataAccessModel.Flush"/> call
            </remarks>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.AfterSubmitAsync(Shaolinq.DataAccessModelHookSubmitContext,System.Threading.CancellationToken)">
            <summary>
            Called just after changes have been written to the database
            </summary>
            <remarks>
            A transaction is usually committed after this call unless the call is due
            to a <see cref = "M:Shaolinq.DataAccessModel.Flush"/> call
            </remarks>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.BeforeRollbackAsync(Shaolinq.DataAccessModelHookRollbackContext)">
            <summary>
            Called just before a transaction is rolled back
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.BeforeRollbackAsync(Shaolinq.DataAccessModelHookRollbackContext,System.Threading.CancellationToken)">
            <summary>
            Called just before a transaction is rolled back
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.AfterRollbackAsync(Shaolinq.DataAccessModelHookRollbackContext)">
            <summary>
            Called just after a transaction is rolled back
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.AfterRollbackAsync(Shaolinq.DataAccessModelHookRollbackContext,System.Threading.CancellationToken)">
            <summary>
            Called just after a transaction is rolled back
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.CreateGuid">
            <summary>
            Called when the model needs to create a Guid
            </summary>
            <returns>A Guid or null if the hook wants to defer creation to another hook or default</returns>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.CreateGuid(Shaolinq.Persistence.PropertyDescriptor)">
            <summary>
            Called when the model needs to create a Guid
            </summary>
            <param name="propertyDescriptor">The property descriptor related to the GUID if applicable</param>
            <returns>A Guid or null if the hook wants to defer creation to another hook or default</returns>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.Create(Shaolinq.DataAccessObject)">
            <summary>
            Called after a new object has been created
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.Read(Shaolinq.DataAccessObject)">
            <summary>
            Called just after an object has been read from the database
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.BeforeSubmit(Shaolinq.DataAccessModelHookSubmitContext)">
            <summary>
            Called just before changes/updates are written to the database
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.AfterSubmit(Shaolinq.DataAccessModelHookSubmitContext)">
            <summary>
            Called just after changes have been written to the database
            </summary>
            <remarks>
            A transaction is usually committed after this call unless the call is due
            to a <see cref="M:Shaolinq.DataAccessModel.Flush"/> call
            </remarks>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.BeforeRollback(Shaolinq.DataAccessModelHookRollbackContext)">
            <summary>
            Called just before a transaction is rolled back
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessModelHook.AfterRollback(Shaolinq.DataAccessModelHookRollbackContext)">
            <summary>
            Called just after a transaction is rolled back
            </summary>
        </member>
        <member name="T:Shaolinq.DataAccessObjectDataContext">
            <summary>
            Stores a cache of all objects that have been loaded or created within a context
            of a transaction.
            Code repetition and/or ugliness in this class is due to the need for this
            code to run FAST.
            </summary>
        </member>
        <member name="M:Shaolinq.TransactionScopeExtensions.Import``1(System.Transactions.TransactionScope,``0)">
            <summary>
            Import the given <see cref="T:Shaolinq.DataAccessObject"/> into the current scope.
            </summary>
            <typeparam name="T">The type of <see cref="T:Shaolinq.DataAccessObject"/> to import</typeparam>
            <param name="dataAccessObject">The <see cref="T:Shaolinq.DataAccessObject"/> to import</param>
            <returns>The given <see cref="T:Shaolinq.DataAccessObject"/> unless a cached copy of the <see cref="T:Shaolinq.DataAccessObject"/>
            already exists in the current context in which case the existing instance is merged with the imported object
            and the existing instance returned.</returns>
            <remarks>
            <para>Use this method to import a <see cref="T:Shaolinq.DataAccessObject"/> stored from a different context into the
            current context.</para>
            <para>Each <see cref="T:Shaolinq.DataAccessScope"/> has a context that contains a cache of all the <see cref="T:Shaolinq.DataAccessObject"/>s that have been
            created or queried. Subsequent queries will return the same instance of the object. Importing an object that is
            already cached will not replace the existing object with the imported object but rather changes from the imported
            object will be applied to the existing object in a merge operation. For the purposes of a merge, changes in the imported
            object have higher priority than uncommited changes in the existing object in the cache.</para>
            </remarks>
        </member>
        <member name="M:Shaolinq.TransactionScopeExtensions.Import``1(System.Transactions.TransactionScope,``0[])">
            <summary>
            Import the given <see cref="T:Shaolinq.DataAccessObject"/>s into the current scope.
            </summary>
            <typeparam name="T">The type of <see cref="T:Shaolinq.DataAccessObject"/>s to import</typeparam>
            <param name="dataAccessObjects">The <see cref="T:Shaolinq.DataAccessObject"/>s to import</param>
            <remarks>
            <para>Use this method to import a set of <see cref="T:Shaolinq.DataAccessObject"/>s stored from a different context into the
            current context.</para>
            <para>Each <see cref="T:Shaolinq.DataAccessScope"/> has a context that contains a cache of all the <see cref="T:Shaolinq.DataAccessObject"/>s that have been
            created or queried. Subsequent queries will return the same instance of the object. Importing an object that is
            already cached will not replace the existing object with the imported object but rather changes from the imported
            object will be applied to the existing object in a merge operation. For the purposes of a merge, changes in the imported
            object have higher priority than uncommited changes in the existing object in the cache.</para>
            </remarks>
        </member>
        <member name="M:Shaolinq.TransactionScopeExtensions.Import``1(System.Transactions.TransactionScope,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Import the given <see cref="T:Shaolinq.DataAccessObject"/>s into the current scope.
            </summary>
            <typeparam name="T">The type of <see cref="T:Shaolinq.DataAccessObject"/>s to import</typeparam>
            <param name="dataAccessObjects">The <see cref="T:Shaolinq.DataAccessObject"/>s to import</param>
            <remarks>
            <para>Use this method to import a set of <see cref="T:Shaolinq.DataAccessObject"/>s stored from a different context into the
            current context.</para>
            <para>Each <see cref="T:Shaolinq.DataAccessScope"/> has a context that contains a cache of all the <see cref="T:Shaolinq.DataAccessObject"/>s that have been
            created or queried. Subsequent queries will return the same instance of the object. Importing an object that is
            already cached will not replace the existing object with the imported object but rather changes from the imported
            object will be applied to the existing object in a merge operation. For the purposes of a merge, changes in the imported
            object have higher priority than uncommited changes in the existing object in the cache.</para>
            </remarks>
        </member>
        <member name="M:Shaolinq.TransactionScopeExtensions.GetCurrentSqlTransactionalCommandsContext(System.Transactions.TransactionScope,Shaolinq.DataAccessModel)">
            <summary>
            Retrieves the current <see cref="T:Shaolinq.Persistence.SqlTransactionalCommandsContext"/> for direct access to the database.
            </summary>
            <param name="scope">The current scope</param>
            <param name="model">The dataaccess model</param>
            <returns>The <see cref="T:Shaolinq.Persistence.SqlTransactionalCommandsContext"/></returns>
        </member>
        <member name="P:Shaolinq.IIndexAttribute.SortOrder">
            <summary>
            The order of the index. Unspecified is database dependent but usually ascending.
            </summary>
        </member>
        <member name="P:Shaolinq.IIndexAttribute.CompositeOrder">
            <summary>
            An integer representing the relative order of the current property in the index.
            Order is undefined if multiple properties have the same <c>IndexName</c> and <c>CompositeOrder</c>
            </summary>
        </member>
        <member name="P:Shaolinq.IIndexAttribute.IncludeOnly">
            <summary>
            The data of this column will be included in the leaf nodes of the index but will not
            actually be indexed. Equivalent to <c>CREATE INDEX INCLUDE</c> in MSSQL
            </summary>
        </member>
        <member name="P:Shaolinq.NamedMemberAttribute.Name">
            <summary>
            The column name for the current member
            </summary>
        </member>
        <member name="P:Shaolinq.NamedMemberAttribute.SuffixName">
            <summary>
            The name used when constructing the foriegn key column name amd the current member is the last part of a nested primary key.
            </summary>
            <remarks>
            By default this value will be set to the property name.
            Refer to the documentation for <see cref="P:Shaolinq.NamedMemberAttribute.PrefixName"/> to see how <see cref="P:Shaolinq.NamedMemberAttribute.PrefixName"/> and <see cref="P:Shaolinq.NamedMemberAttribute.SuffixName"/> are used.
            </remarks>
            <seealso cref="P:Shaolinq.NamedMemberAttribute.PrefixName"/>
        </member>
        <member name="P:Shaolinq.NamedMemberAttribute.PrefixName">
            <summary>
            The name used when constructing the foriegn key column name amd the current member is the non-last part of a nested primary key.
            </summary>
            <remarks>
            By default this value will be set to the property name.
            Nested primary keys occur when a <see cref="T:Shaolinq.DataAccessObject"/> (<c>Object1</c>) defines a primary key that is itself a <see cref="T:Shaolinq.DataAccessObject"/> (<c>KeyObject</c>).
            When the <c>Object1</c> is subsequently referenced by another <see cref="T:Shaolinq.DataAccessObject"/> (<c>Object2.Property</c>) then the column name for the foriegn key on <c>Object2</c>
            would be <c>Object2.Property.Name + Object1.Id.PrefixName + KeyObject.Id.SuffixName</c>.
            </remarks>
            <see cref="P:Shaolinq.NamedMemberAttribute.SuffixName"/>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.SortOrder">
            <summary>
            The order of the index. Unspecified is database dependent but usually ascending.
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.CompositeOrder">
            <summary>
            An integer representing the relative order of the current property in the index.
            Order is undefined if multiple properties have the same <c>IndexName</c> and <c>CompositeOrder</c>
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.Disable">
            <summary>
            Set to true on a primary key or class to remove the default organization index and use heap storage instead (MSSQL only)
            </summary>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.Lowercase">
            <summary>
            If supported, the value of strings will be lower cased before creating the index
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.LowercaseIndex">
            <summary>
            If supported, the value of strings will be lower cased before creating the index
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.IndexName">
            <summary>
            The name of the index. Some databases require index names to be server-unique rather than
            database-unique. Use the same <c>IndexName</c> across multiple properties to create
            a composite index
            </summary>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.Unique">
            <summary>
            The index should be a unique index
            </summary>
        </member>
        <member name="P:Shaolinq.OrganizationIndexAttribute.Properties">
            <summary>
            The properties that make up the index (only applicable if attribute is used on a class)
            </summary>
        </member>
        <member name="T:Shaolinq.ForeignObjectConstraintAttribute">
            <summary>
            Configures how foriegn key constraints react to deletes or primary keys
            </summary>
        </member>
        <member name="T:Shaolinq.MissingDataAccessObjectException">
            <summary>
            Thrown when trying to update an object that does not exist or when updating
            related property to an object that does not exist.
            </summary>
        </member>
        <member name="P:Shaolinq.MissingDataAccessObjectException.MissingObject">
            <summary>
            The object that is missing (if known). Can be null if constraints are deferred.
            </summary>
        </member>
        <member name="T:Shaolinq.InvalidDataAccessObjectAccessException">
            <summary>
            Thrown when you try to use a deflated DAO reference to update an object but the deflated reference
            is invalid.
            </summary>
        </member>
        <member name="M:Shaolinq.TypeBuilding.DataAccessObjectTypeBuilder.BuildHasPropertyChangedMethod">
            <summary>
            Builds the HasPropertyChanged method.
            </summary>
        </member>
        <member name="T:Shaolinq.IndexAttribute">
            <summary>
            Apply this attribute to one or more properties to define indexes for those properties.
            </summary>
            <remarks>
            <para>
            Applying this property to multiple properties will create a composite index. You can
            define the order of the columns of a compiosite index by setting the <see cref="P:Shaolinq.IndexAttribute.CompositeOrder"/>
            property. By default properties with no explicitly defined <see cref="P:Shaolinq.IndexAttribute.CompositeOrder"/> come last
            in source code order.
            </para>
            <para>
            It is easier to define composite indexes by applying this attribute to the <see cref="T:Shaolinq.DataAccessObject"/> class
            and using the <see cref="M:Shaolinq.IndexAttribute.#ctor(System.String[])"/> constructor to specify the properties for the index. The order
            of the properties provided defines the order within the index.
            </para>
            <para>
            If defined on a class the <see cref="P:Shaolinq.IndexAttribute.Properties"/> property will contain a list of string property specifiers.
            Each string is of the format <c>PropertyName:[Modifier1,Modifier2]</c> where valid modifiers can be:
            <c>Ascending</c>, <c>Descending</c>, <c>LowercaseIndex</c>, <c>IncludeOnly</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.SortOrder">
            <summary>
            The order of the index. Unspecified is database dependent but usually ascending.
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.CompositeOrder">
            <summary>
            An integer representing the relative order of the current property in the index.
            Order is undefined if multiple properties have the same <c>IndexName</c> and <c>CompositeOrder</c>
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.Unique">
            <summary>
            The index should be a unique index
            </summary>
        </member>
        <member name="P:Shaolinq.IndexAttribute.IncludeOnly">
            <summary>
            The data of this column will be included in the leaf nodes of the index but will not
            actually be indexed. Equivalent to <c>CREATE INDEX INCLUDE</c> in MSSQL
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.Lowercase">
            <summary>
            If supported, the value of strings will be lower cased before creating the index
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.LowercaseIndex">
            <summary>
            If supported, the value of strings will be lower cased before creating the index
            </summary>
            <remarks>
            This property is ignored if the attribute is applied at the class level.
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.IndexName">
            <summary>
            The name of the index. Some databases require index names to be server-unique rather than
            database-unique. Use the same <c>IndexName</c> across multiple properties to create
            a composite index
            </summary>
        </member>
        <member name="P:Shaolinq.IndexAttribute.IndexType">
            <summary>
            The type of index to create if supported.
            </summary>
            <remarks>
            <seealso cref="P:Shaolinq.IndexAttribute.IndexType"/>
            </remarks>
        </member>
        <member name="P:Shaolinq.IndexAttribute.Condition">
            <summary>
            A string containing a conditional expression for determining what rows to include in the index
            </summary>
            <remarks>
            This property is useful for <see cref="P:Shaolinq.IndexAttribute.Unique"/> composite indexes where you may only want to include rows
            in the index when certain columns are of a certain value.
            Multiple conditions can be added bvy using the <c>&amp;&amp;</c> operator. If <see cref="P:Shaolinq.IndexAttribute.Condition"/> is defined on 
            more than one related <see cref="T:Shaolinq.IndexAttribute"/> then they are all included.
            </remarks>
            <example>
            [IndexAttribute(Condition = "Master == true")]
            </example>
        </member>
        <member name="P:Shaolinq.IndexAttribute.Properties">
            <summary>
            The properties that make up the index (only applicable if attribute is used on a class)
            </summary>
        </member>
        <member name="M:Shaolinq.IndexAttribute.#ctor">
            <summary>
            Creates a single column index for this property.
            </summary>
        </member>
        <member name="M:Shaolinq.IndexAttribute.#ctor(System.String)">
            <summary>
            Create a new index with the given name if this atteribute is used on a property or an index for the given property if used on a class
            </summary>
            <remarks>
            <para>If this attribute is used on a property then using the same index name across different properties creates a composite index.</para>
            <para>
            If this attribute is used on a class then the supplied paramter defines the single property that this index applies to.
            In this case use the <see cref="P:Shaolinq.IndexAttribute.IndexName"/> property to optionally set the IndexName name.
            </para>
            </remarks>
            <param name="indexNameIfPropertyOrPropertyIfClass">The name of the index (if used on a property) or name of the property (if used on a class)</param>
        </member>
        <member name="M:Shaolinq.IndexAttribute.#ctor(System.String[])">
            <summary>
            Create a new index with the given properties
            </summary>
            <param name="properties">The properties </param>
        </member>
        <member name="T:Shaolinq.DataAccessObjectState">
            <summary>
            Represents the state of the current object within the current transaction.
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.Unchanged">
            <summary>
            The object is unchanged.
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.Changed">
            <summary>
            The object has changed.
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.New">
            <summary>
            The object is new.
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.NewChanged">
            <summary>
            The object is new and has changed.
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.ServerSidePropertiesHydrated">
            <summary>
            The object has just been commited.
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.ReferencesNewObject">
            <summary>
            The object references a new object
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.PrimaryKeyReferencesNewObject">
            <summary>
            The object's primary key references a new object
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.ReferencesNewObjectWithServerSideProperties">
            <summary>
            The object references an object that has server side properties that aren't yet known
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.PrimaryKeyReferencesNewObjectWithServerSideProperties">
            <summary>
            The object's primary key references an object that has server side properties that aren't yet known
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.Deflated">
            <summary>
            The object is a deflated reference where the primary key is known
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.DeflatedPredicated">
            <summary>
            The object is a deflated reference where keys other than the primary key are known
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.Untracked">
            <summary>
            The object was manually constructed and cannot be used for persistence
            </summary>
        </member>
        <member name="F:Shaolinq.DataAccessObjectState.Deleted">
            <summary>
            The object has been deleted
            </summary>
        </member>
        <member name="T:Shaolinq.InvalidDataAccessObjectModelDefinition">
            <summary>
            An exception that is thrown when there is a problem with the definition of a data access model and its associated data access object types.
            </summary>
        </member>
        <member name="T:Shaolinq.BackReferenceAttribute">
            <summary>
            An attribute that declares that a property is a back reference to another object
            whereby the declaring object is a child in a one-to-many relationship with the other object.
            </summary>
        </member>
        <member name="T:Shaolinq.IDataAccessObjectAdvanced">
            <summary>
            An interface implemented by all data access objects.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.TypeDescriptor">
            <summary>
            The TypeDescriptor associated with this data access object.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.DataAccessModel">
            <summary>
            Gets the data access model associated with the current domain object.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.IsDeflatedReference">
            <summary>
            Returns true if the current object has only been partially loaded and can't be read (except for primary keys).
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.IsDeflatedPredicatedReference">
            <summary>
            Returns true if the current object has only been partially loaded and can't be read.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.DeflatedPredicate">
            <summary>
            Gets the predicate if this object is a deflated predicated reference.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.IsNew">
            <summary>
            Returns true if the current object has not yet been persisted or flushed.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.IsDeleted">
            <summary>
            Returns true if the current object has been deleted
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.KeyType">
            <summary>
            Returns the Primary Key type for this object.  If the object defines a composite key the return value will be null
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.CompositeKeyTypes">
            <summary>
            Returns an array of the types in the composite primary key
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.NumberOfPrimaryKeys">
            <summary>
            Returns the number of direct properties on this object that make up the primary key.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.NumberOfPrimaryKeysGeneratedOnServerSide">
            <summary>
            Returns the number of direct properties on this object that make up the primary key
            and are generated on the server side.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.HasCompositeKey">
            <summary>
            Returns True if the object has a composite primary key
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.HasObjectChanged">
            <summary>
            Returns true if the object has been changed from when it was first loaded or created.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.ObjectState">
            <summary>
            Gets the object state of the object (mostly used for persistence).
            </summary>S
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.DefinitionType">
            <summary>
            Gets the original abstract type that defined the current object.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.DefinesAnyDirectPropertiesGeneratedOnTheServerSide">
            <summary>
            Returns True if this object defines any direct properties that are generated on
            the server side.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.IsMissingAnyDirectOrIndirectServerSideGeneratedPrimaryKeys">
            <summary>
            Returns True if the object is missing any auto increment integer primary keys.
            This check includes primary keys that are made up of objects with primary keys 
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.NumberOfPropertiesGeneratedOnTheServerSide">
            <summary>
            Returns the number of direct properties generated on the server side.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.Delete">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.HasPropertyChanged(System.String)">
            <summary>
            Returns true if the property with the given name has been changed since the object was loaded or created.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetPrimaryKeys">
            <summary>
            Gets an array of the primary keys and their values.
            This property is generated using Reflection.Emit.  Strings inside the returned <see cref="T:Shaolinq.ObjectPropertyValue"/>
            are guaranteed to be interned.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetPrimaryKeysFlattened">
            <summary>
            Gets an array of the primary keys and their values.
            This property is generated using Reflection.Emit.  Strings inside the returned <see cref="T:Shaolinq.ObjectPropertyValue"/>
            are guaranteed to be interned.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetPrimaryKeysForUpdate">
            <summary>
            Gets an array of the primary keys used for updating the object (may be different from current primary key if the primary key was changed).
            This property is generated using Reflection.Emit.  Strings inside the returned <see cref="T:Shaolinq.ObjectPropertyValue"/>
            are guaranteed to be interned.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetPrimaryKeysForUpdateFlattened">
            <summary>
            Gets an array of the primary keys used for updating the object (may be different from current primary key if the primary key was changed).
            This property is generated using Reflection.Emit.  Strings inside the returned <see cref="T:Shaolinq.ObjectPropertyValue"/>
            are guaranteed to be interned.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetPropertiesGeneratedOnTheServerSide">
            <summary>
            Gets an array of properties generated on the server side. Does not return values.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetAllProperties">
            <summary>
            Gets an array of all the properties on this object
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetRelatedObjectProperties">
            <summary>
            Gets an array of all the properties that are DataAccessObjects on this object
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetChangedProperties">
            <summary>
            Gets a list of all the properties on this object that have changed since the object was loaded or created.
            This property is generated using Reflection.Emit.  Strings inside the returned <see cref="T:Shaolinq.ObjectPropertyValue"/>
            are guaranteed to be interned.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.GetChangedPropertiesFlattened">
            <summary>
            Gets a list of all the properties on this object that have changed since the object was loaded or created.
            This property is generated using Reflection.Emit.  Strings inside the returned <see cref="T:Shaolinq.ObjectPropertyValue"/>
            are guaranteed to be interned. Properties that are DataAccessObjects will be returned as individual primary key
            properties.
            </summary>
        </member>
        <member name="M:Shaolinq.IDataAccessObjectAdvanced.Inflate">
            <summary>
            Inflates the current object if the object is currently deflated.  A deflated object only contains
            primary keys and no other property values. Inflation usually requires a database query.
            </summary>
        </member>
        <member name="P:Shaolinq.IDataAccessObjectAdvanced.PrimaryKeyIsCommitReady">
            <summary>
            Returns True if the primary keys are ready to be submitted to the underlying RDBMS.
            A primary key is ready if all of its component primary key properties are either
            set or autoincrement (will be generated by the server). This means server generated properties
            could be emptyy.
            </summary>
        </member>
        <member name="T:Shaolinq.DataAccessModelConfiguration">
            <summary>
            Represents the configuration of a model
            </summary>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.SqlDatabaseContextInfos">
            <summary>
            A list of one of more database connections.
            </summary>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.ConstraintDefaultsConfiguration">
            <summary>
            Default settings for contraints such as those defined in <see cref="T:Platform.Validation.SizeConstraintAttribute"/>
            </summary>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.NamingTransforms">
            <summary>
            Configuration for how various names are translated into SQL.
            </summary>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.ReferencedTypes">
            <summary>
            A list of types that are impplicitly referenced for the purposes of evaluating expressions
            </summary>
            <remarks>
            <seealso cref="T:Shaolinq.ComputedMemberAttribute"/>
            </remarks>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.SaveAndReuseGeneratedAssemblies">
            <summary>
            By default Shaolinq saves a copy of the generated DataAccessModel and reuses it on demand.
            </summary>
            <remarks>
            Set this property to <c>faldse</c> if you prefer to assemblies to only be generated in memory.
            </remarks>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.ValueTypesAutoImplicitDefault">
            <summary>
            By default value types are set to <c>default(T)</c> as is the case with C#.
            Set this property to false to disable this behaviour and require defaults to be set.
            </summary>
            <remarks>
            Declaring a property as required with <see cref="T:Platform.Validation.ValueRequiredAttribute"/> will override
            this setting on a property-by-property basis. For example, if this setting is set to <c>true</c>
            but a property is attributed with <see cref="T:Platform.Validation.ValueRequiredAttribute"/> then a value will need
            to be explicitly set on the property before its commited to the database.
            <para>
            This property only affects non-nullable value types. Value types that are nullable are treated
            like reference types in that they always have an implicit default value of <c>null</c> if not set.
            </para>
            </remarks>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.AlwaysSubmitDefaultValues">
            <summary>
            By default, properties with declared default values that are not explicitly set are will be submitted to 
            the database. Set this to false to not send default values and have the database apply the default value
            basded upon the <c>DEFAULT VALUE</c> constraint.
            </summary>
            <remarks>
            The default value for this property is <c>true</c>.
            Set this property to false if you want default values to be ommitted when submitting new objects.
            When this property is <c>true</c> (default) then the default value that is configured on the <see cref="T:Shaolinq.DataAccessModel"/>
            will override the <c>DEFAULT VALUE</c> constraint declared database schema if there is a schema mismatch.
            <para>
            Properties that have implicit default values will always be submitted if <see cref="P:Shaolinq.DataAccessModelConfiguration.IncludeImplicitDefaultsInSchema"/> is <c>false</c>
            </para>
            </remarks>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.IncludeImplicitDefaultsInSchema">
            <summary>
            Include the implict default values into the database schema.
            </summary>
            <remarks>
            The default value for this property is false which means implicit default values are not included in the
            database schema as a <c>DEFAULT VALUE</c> directive. Explicitly declared default values (values declared
            using the <see cref="T:Platform.Validation.DefaultValueAttribute"/>) are always included in the schema.
            <para>
            This property only has an effect if <see cref="P:Shaolinq.DataAccessModelConfiguration.ValueTypesAutoImplicitDefault"/> is <c>true</c></para>
            and can be overriden on a property-by-property basis by applying the <see cref="T:Platform.Validation.ValueRequiredAttribute"/>.
            </remarks>
        </member>
        <member name="P:Shaolinq.DataAccessModelConfiguration.GeneratedAssembliesSaveDirectory">
            <summary>
            Path to the folder to store generated assemblies when <see cref="P:Shaolinq.DataAccessModelConfiguration.SaveAndReuseGeneratedAssemblies"/> is <c>true</c>.
            </summary>
            <remarks>
            If not configured, the directory containing the <c>Shaolinq.dll</c> assembly.
            Use <c>$(env.TEMP)</c> if you want to use the system defined TEMP directory (on Azure WebApps for example)
            </remarks>
        </member>
        <member name="T:Shaolinq.PersistedMemberAttribute">
            <summary>
            Specifies the attribute
            </summary>
        </member>
        <member name="P:Shaolinq.PrimaryKeyAttribute.SortOrder">
            <summary>
            The order of the index. Unspecified is database dependent but usually ascending.
            </summary>
        </member>
        <member name="P:Shaolinq.PrimaryKeyAttribute.CompositeOrder">
            <summary>
            An integer representing the relative order of the current property in the index.
            Order is undefined if multiple properties have the same <c>IndexName</c> and <c>CompositeOrder</c>
            </summary>
        </member>
        <member name="P:Shaolinq.PrimaryKeyAttribute.IsPrimaryKey">
            <summary>
            Specifies whether this propery should participate as part of the primary key.
            </summary>
            <remarks>
            Derived classes can reapply this attribute and set <c>IsPriamryKey</c> to <c>false</c>
            to opt the property out of being primary key.
            </remarks>
        </member>
        <member name="T:Shaolinq.DataAccessObjectsAttribute">
            <summary>
            Marks a propertyas one that references a collection of objects.
            </summary>
        </member>
        <member name="M:Shaolinq.RelatedDataAccessObjects`1.Invalidate">
            <summary>
            Invalidates any eagerly loaded items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shaolinq.RelatedDataAccessObjects`1.Items">
            <summary>
            Gets the eagerly loaded items in this collection or throws an <see cref="T:System.InvalidOperationException"/> if the collection hasn't been eaglerly loaded.
            </summary>
            <returns>
            A read-only list of the items in this collection.
            </returns>
        </member>
        <member name="M:Shaolinq.RelatedDataAccessObjects`1.Items(System.Boolean)">
            <summary>
            Gets the eagerly loaded items in this collection or throws an <see cref="T:System.InvalidOperationException"/>
            if the collection hasn't been eaglerly loaded or lazily loads the items and returns them if <paramref name="lazyLoadIfNecessary"/> is true.
            </summary>
            <param name="lazyLoadIfNecessary">If true then lazily loads the items if they haven't already been loaded (equivalent to using <see cref="F:Shaolinq.LoadOptions.EagerOrLazy"/>) otherwise throws an exception if the items haven't already been loaded (equivalent to using <see cref="F:Shaolinq.LoadOptions.EagerOnly"/>).</param>
            <returns>
            A read-only list of the items in this collection.
            </returns>
        </member>
        <member name="M:Shaolinq.RelatedDataAccessObjects`1.Items(Shaolinq.LoadOptions)">
            <summary>
            Gets the items in this collection using specified <see cref="T:Shaolinq.LoadOptions"/>.
            </summary>
            <param name="options">Options that specify how to return values</param>
            <returns>The items</returns>
        </member>
        <member name="T:Shaolinq.UniqueConstraintException">
            <summary>
            An object with the same primary key exists or an object with a unique property 
            with the same value exists.
            </summary>
        </member>
    </members>
</doc>
